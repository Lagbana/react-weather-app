{"version":3,"sources":["types/types.ts","utils/getUrl.ts","utils/getApiKey.ts","utils/unixDateConvert.ts","helpers/ApiCaller.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Units","getUrl","props","searchCity","units","longitude","latitude","getForecast","getWeather","apiKey","weatherApiKey","String","process","googlePlacesApiKey","weatherUrl","undefined","forecastUrl","UnixDateConvert","unixDate","dateObject","Date","longStringDate","toLocaleString","weekday","year","month","day","hour12","hour","minute","shortNumericDate","time","ApiCaller","a","Metric","axios","get","data","forecastResponse","city","coord","lon","lat","weatherResponse","console","log","current","dt","date","sunrise","sunRise","sunset","sunSet","humidity","temperature","temp","feelsLike","feels_like","cloudiness","clouds","uvIndex","uvi","visibility","rain","snow","description","weather","iconID","icon","weatherIconUrl","App","listItems","map","item","index","onClick","toString","className","flexDirection","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":";kLAAYA,E,sGCGCC,EAAS,SAACC,GAAgB,IAEnCC,EAMED,EANFC,WACAC,EAKEF,EALFE,MACAC,EAIEH,EAJFG,UACAC,EAGEJ,EAHFI,SACAC,EAEEL,EAFFK,YACAC,EACEN,EADFM,WAEqBC,ECNhB,CACLC,cAAeC,OAAOC,oCACtBC,mBAAoBF,OAAOC,4CDIrBF,cAYR,MAAO,CACLI,WAVAL,GAAUD,EAAV,8DAC2DF,EAD3D,gBAC2ED,EAD3E,0CACsHI,EADtH,kBACsIL,QAClIW,EASJC,YANAP,GAAUF,EAAV,6DAC0DJ,EAD1D,kBAC8EM,EAD9E,kBAC8FL,QAC1FW,K,SDtBIf,K,gBAAAA,E,qBAAAA,M,KGAL,IAAMiB,EAAkB,SAACC,GAC9B,IAEMC,EAAa,IAAIC,KAFS,IAAXF,GA0BrB,MAAO,CAAEG,eAtBcF,EAAWG,eAAe,QAAS,CACxDC,QAAS,QACTC,KAAM,UACNC,MAAO,QACPC,IAAK,UACLC,QAAQ,EACRC,KAAM,UACNC,OAAQ,YAeeC,iBAZAX,EAAWG,eAAe,QAAS,CAC1DE,KAAM,UACNC,MAAO,UACPC,IAAK,YASoCK,KAN9BZ,EAAWG,eAAe,QAAS,CAC9CK,QAAQ,EACRC,KAAM,UACNC,OAAQ,cCnBCG,EAAS,uCAAG,WAAO7B,GAAP,6FAAA8B,EAAA,2DACChC,EAAO,CAC7BE,aACAI,aAAa,EACbH,MAAOJ,EAAMkC,WAHPlB,EADe,EACfA,aADe,iCAUKmB,IAAMC,IAAIpB,GAVf,wJAUF,EAAgCqB,KAV9B,QAUrBC,EAVqB,gBAajBjC,EAbiB,UAaGiC,SAbH,aAaG,EAAkBC,KAAKC,MAAMC,IACjDnC,EAdiB,UAcEgC,SAdF,aAcE,EAAkBC,KAAKC,MAAME,IAd/B,EAgBAzC,EAAO,CAC5BE,aACAE,YACAC,WACAE,YAAY,EACZJ,MAAOJ,EAAMkC,WALPpB,EAhBe,EAgBfA,YAhBe,kCAyBIqB,IAAMC,IAAItB,GAzBd,2JAyBH,EAA+BuB,KAzB5B,QAyBrBM,EAzBqB,aA2BvBC,QAAQC,IAAR,qBAAmBF,GACnBC,QAAQC,IAAR,qBAAmBP,GA5BI,EA8BUrB,EAAe,UAAC0B,SAAD,aAAC,EAAiBG,QAAQC,IAAlDC,EA9BD,EA8Bf3B,eA9Be,EA+BGJ,EAAe,UAAC0B,SAAD,aAAC,EAAiBG,QAAQG,SAArDC,EA/BS,EA+BfnB,KA/Be,EAgCEd,EAAe,UAAC0B,SAAD,aAAC,EAAiBG,QAAQK,QAApDC,EAhCS,EAgCfrB,KACFsB,EAjCiB,UAiCNV,SAjCM,aAiCN,EAAiBG,QAAQO,SACpCC,EAlCiB,UAkCHX,SAlCG,aAkCH,EAAiBG,QAAQS,KACvCC,EAnCiB,UAmCLb,SAnCK,aAmCL,EAAiBG,QAAQW,WACrCC,EApCiB,UAoCJf,SApCI,aAoCJ,EAAiBG,QAAQa,OACtCC,EArCiB,UAqCPjB,SArCO,aAqCP,EAAiBG,QAAQe,IACnCC,EAtCiB,UAsCJnB,SAtCI,aAsCJ,EAAiBG,QAAQgB,WAtCrB,UAuCVnB,SAvCU,aAuCV,EAAiBG,QAAQiB,KAvCf,UAwCVpB,SAxCU,aAwCV,EAAiBG,QAAQkB,KAChCC,EAzCiB,UAyCHtB,SAzCG,aAyCH,EAAiBG,QAAQoB,QAAQD,YAC/CE,EA1CiB,UA0CRxB,SA1CQ,aA0CR,EAAiBG,QAAQoB,QAAQE,KAC1CC,EA3CiB,4CA2CqCF,EA3CrC,WA6CK,CAC1BT,aACAV,OACAQ,YACAN,UACAE,SACAQ,UACAS,iBACAP,aACAT,WACAC,cACAW,eAxDqB,4CAAH,sD,QCwBPK,EArBH,WAEV,IAEMC,EAFsB,CAAC,SAAU,UAAW,WAEtBC,KAAI,SAACC,EAAMC,GACrC,OACE,cAAC,IAAD,CAAiCC,QAAS,aAA1C,SACGF,GADYC,EAAME,eAKzB,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,uBACA,cAAC,IAAD,CAAMC,cAAe,SAArB,SAAgCP,IAChC,cAAC,IAAD,IACA,cAAC,IAAD,CAAQI,QAAO,sBAAE,sBAAA1C,EAAA,sEAAmBD,EAAU,UAA7B,2CAAjB,SAA2D,sCCVlD+C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4472285a.chunk.js","sourcesContent":["export enum Units {\n  Metric = \"metric\",\n  Imperial = \"imperial\",\n}\n\nexport interface Url {\n  searchCity?: string;\n  units?: Units;\n  longitude?: number;\n  latitude?: number;\n  getForecast?: boolean;\n  getWeather?: boolean;\n}\n\nexport interface ApiResponse {\n  cloudiness?: number\n  date?: string;\n  sunRise?: string;\n  sunSet?: string;\n  temperature?: number;\n  feelsLike?: number;\n  description?: string;\n  humidity?: number;\n  weatherIconUrl?: string;\n  uvIndex?: number;\n  visibility?: number;\n}","import { getApiKey } from \"./getApiKey\";\nimport { Url } from \"../types\";\n\nexport const getUrl = (props: Url) => {\n  const {\n    searchCity,\n    units,\n    longitude,\n    latitude,\n    getForecast,\n    getWeather,\n  } = props;\n  const { weatherApiKey: apiKey } = getApiKey();\n\n  const weatherUrl =\n    apiKey && getWeather\n      ? `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude=minutely,hourly&appid=${apiKey}&units=${units}`\n      : undefined;\n\n  const forecastUrl =\n    apiKey && getForecast\n      ? `https://api.openweathermap.org/data/2.5/forecast?q=${searchCity}&appid=${apiKey}&units=${units}`\n      : undefined;\n\n  return {\n    weatherUrl,\n    forecastUrl,\n  };\n};\n","interface ApiKeys {\n  weatherApiKey: string;\n  googlePlacesApiKey: string;\n}\nexport const getApiKey = (): ApiKeys => {\n  //! Do not do this in a production app\n  return {\n    weatherApiKey: String(process.env.REACT_APP_WEATHER_API_KEY),\n    googlePlacesApiKey: String(process.env.REACT_APP_GOOGLE_API_KEY),\n  };\n};\n","export const UnixDateConvert = (unixDate: number) => {\n  const milliseconds = unixDate * 1000;\n\n  const dateObject = new Date(milliseconds);\n\n  const longStringDate = dateObject.toLocaleString(\"en-US\", {\n    weekday: \"short\",\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n    hour12: true,\n    hour: \"numeric\",\n    minute: \"numeric\",\n  });\n\n  const shortNumericDate = dateObject.toLocaleString(\"en-US\", {\n    year: \"numeric\",\n    month: \"numeric\",\n    day: \"numeric\",\n  });\n\n  const time = dateObject.toLocaleString(\"en-US\", {\n    hour12: true,\n    hour: \"numeric\",\n    minute: \"numeric\",\n  });\n\n  return { longStringDate, shortNumericDate, time };\n};\n","import axios from \"axios\";\nimport { getUrl } from \"../utils/getUrl\";\nimport { Units, ApiResponse } from \"../types\";\nimport { UnixDateConvert } from \"../utils/unixDateConvert\";\n\nexport const ApiCaller = async (searchCity: string) => {\n  const { forecastUrl } = getUrl({\n    searchCity,\n    getForecast: true,\n    units: Units.Metric,\n  });\n\n  let weatherResponse, forecastResponse;\n\n  if (forecastUrl) {\n    forecastResponse = (await axios.get(forecastUrl))?.data;\n  }\n\n  const longitude: number = forecastResponse?.city.coord.lon;\n  const latitude: number = forecastResponse?.city.coord.lat;\n\n  const { weatherUrl } = getUrl({\n    searchCity,\n    longitude,\n    latitude,\n    getWeather: true,\n    units: Units.Metric,\n  });\n\n  if (weatherUrl) {\n    weatherResponse = (await axios.get(weatherUrl))?.data;\n  }\n  console.log(`🅰️`, weatherResponse);\n  console.log(`🅱️`, forecastResponse);\n\n  const { longStringDate: date } = UnixDateConvert(weatherResponse?.current.dt);\n  const { time: sunRise } = UnixDateConvert(weatherResponse?.current.sunrise);\n  const { time: sunSet } = UnixDateConvert(weatherResponse?.current.sunset);\n  const humidity = weatherResponse?.current.humidity;\n  const temperature = weatherResponse?.current.temp;\n  const feelsLike = weatherResponse?.current.feels_like;\n  const cloudiness = weatherResponse?.current.clouds; //! New\n  const uvIndex = weatherResponse?.current.uvi;\n  const visibility = weatherResponse?.current.visibility;\n  const rain = weatherResponse?.current.rain; //! New\n  const snow = weatherResponse?.current.snow; //! New\n  const description = weatherResponse?.current.weather.description;\n  const iconID = weatherResponse?.current.weather.icon;\n  const weatherIconUrl = `https://openweathermap.org/img/wn/${iconID}@2x.png`;\n\n  const result: ApiResponse = {\n    cloudiness,\n    date,\n    feelsLike,\n    sunRise,\n    sunSet,\n    uvIndex,\n    weatherIconUrl,\n    visibility,\n    humidity,\n    temperature,\n    description,\n  };\n};\n\n/**\n  uvIndex?: number\n */\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Button, List, ListItem, Card, Flex, Grid } from \"component-library-ld\";\nimport { ApiCaller } from \"./helpers/ApiCaller\";\nimport { ApiResponse } from './types'\nimport GoogleAutocomplete from \"react-google-places-autocomplete\";\n\n\nconst App = () => {\n\n  const namesList: string[] = [\"Ottawa\", \"Toronto\", \"Chicago\"];\n\n  const listItems = namesList.map((item, index) => {\n    return (\n      <ListItem key={index.toString()} onClick={() => { }}>\n        {item}\n      </ListItem>\n    );\n  });\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">James Fan</header>\n      <List flexDirection={\"column\"}>{listItems}</List>\n      <GoogleAutocomplete />\n      <Button onClick={async() => { await ApiCaller(\"Ottawa\")}}>{\"Get weather response from API\"}</Button>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}